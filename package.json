{
	"name": "vscode-image-gallery",
	"displayName": "Image Gallery",
	"description": "Improve image browsing experience, especially for remote development.",
	"version": "1.2.1",
	"publisher": "GeriYoco",
	"repository": {
		"type": "git",
		"url": "https://github.com/geriyoco/vscode-image-gallery"
	},
	"icon": "docs/logo-128.png",
	"galleryBanner": {
		"color": "#000000",
		"theme": "dark"
	},
	"engines": {
		"vscode": "^1.65.0"
	},
	"categories": [
		"Visualization",
		"Data Science",
		"Machine Learning"
	],
	"keywords": [
		"image",
		"remote",
		"remote development",
		"view",
		"visualization"
	],
	"activationEvents": [
		"onCommand:gryc.openGallery",
		"onWebviewPanel:gryc.gallery",
		"onCustomEditor:gryc.viewer"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"configuration": {
			"title": "Image Gallery",
			"properties": {
				"sorting.byPathOptions.localeMatcher": {
					"type": "string",
					"default": "best fit",
					"markdownDescription": "The locale matching algorithm to use. Possible values are \"`lookup`\" and \"`best fit`\"."
				},
				"sorting.byPathOptions.sensitivity": {
					"type": "string",
					"default": "variant",
					"markdownDescription": "Which differences in the strings should be taken into account. Possible values are:\n- \"`base`\": Only strings that differ in base letters compare as unequal. Examples: a ‚â† b, a = √°, a = A.\n- \"`accent`\": Only strings that differ in base letters or accents compare as unequal. Examples: a ‚â† b, a ‚â† √°, a = A.\n- \"`case`\": Only strings that differ in base letters or case compare as unequal. Examples: a ‚â† b, a = √°, a ‚â† A.\n- \"`variant`\": All strings compare as unequal."
				},
				"sorting.byPathOptions.ignorePunctuation": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Whether punctuation should be ignored."
				},
				"sorting.byPathOptions.numeric": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Whether numeric collation should be used, such that \"`img1.jpg`\" > \"`img2.jpg`\" > \"`img10.jpg`\", instead of \"`img1.jpg`\" > \"`img10.jpg`\" > \"`img2.jpg`\"."
				},
				"sorting.byPathOptions.caseFirst": {
					"type": "string",
					"default": "false",
					"markdownDescription": "Whether upper case or lower case should sort first. Possible values are \"`upper`\", \"`lower`\" or \"`false`\" (use the locale's default)."
				},
				"sorting.byPathOptions.collation": {
					"type": "string",
					"default": null,
					"markdownDescription": "Variant collations for certain locales. Possible values include:\n- \"`compat`\" - Arabic\n- \"`dict`\" - Sinhala\n- \"`emoji`\" - root\n- \"`eor`\" - root\n- \"`phonebk`\" - German\n- \"`phonetic`\" - Lingala\n- \"`pinyin`\" - Chinese\n- \"`reformed`\" - Swedish\n- \"`stroke`\" - Chinese\n- \"`trad`\"\n- \"`zhuyin`\" - Chinese"
				},

				"telemetry.geriyocoImageGallery.isTelemetryEnabled": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable / disable telemetry of this extension. If any of the global telemetry settings, including `telemetryLevel`, `isTelemetryEnabled`, `onDidChangeTelemetryEnabled`, rejects telemetry, this setting will be treated as `false`, i.e. this extension will not send any telemetry."
				}
			}
		},
		"customEditors": [
			{
				"displayName": "Viewer (GeriYoco Image Gallery)",
				"viewType": "gryc.viewer",
				"priority": "default",
				"selector": [
					{
						"filenamePattern": "*.{jpg,jpe,jpeg,jif,jfif,jfi,png,bmp,gif,ico,webp,avif,svg}"
					}
				]
			}
		],
		"commands": [
			{
				"command": "gryc.openGallery",
				"title": "Open Image Gallery (GeriYoco) üñºÔ∏è",
				"category": "Image Gallery"
			}
		],
		"menus": {
			"explorer/context": [
				{
					"command": "gryc.openGallery",
					"group": "2_grycImageGallery@1",
					"when": "explorerResourceIsFolder && !virtualWorkspace"
				}
			]
		}
	},
	"scripts": {
		"deploy": "vsce publish",
		"local-deploy": "vsce package",
		"open-in-browser": "vscode-test-web --extensionDevelopmentPath=. .",
		"vscode:prepublish": "npm run package",
		"compile": "webpack",
		"watch": "webpack --watch",
		"package": "webpack --mode production --devtool hidden-source-map",
		"compile-tests": "tsc -p . --outDir dist",
		"watch-tests": "tsc -p . -w --outDir dist",
		"pretest": "npm run compile-tests && npm run compile && npm run lint",
		"lint": "eslint src --ext ts",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/chai": "^4.3.3",
		"@types/mocha": "^9.1.0",
		"@types/node": "14.x",
		"@types/vscode": "^1.65.0",
		"@typescript-eslint/eslint-plugin": "^5.16.0",
		"@typescript-eslint/parser": "^5.16.0",
		"@vscode/test-electron": "^2.1.3",
		"@vscode/test-web": "^0.0.24",
		"eslint": "^8.11.0",
		"glob": "^7.2.0",
		"chai": "^4.3.3",
		"mocha": "^9.2.2",
		"ts-loader": "^9.2.8",
		"typescript": "^4.5.5",
		"vsce": "^2.11.0",
		"webpack": "^5.70.0",
		"webpack-cli": "^4.9.2"
	},
	"dependencies": {
		"@vscode/extension-telemetry": "^0.6.2",
		"panzoom": "^9.4.2"
	}
}